{"ast":null,"code":"var _jsxFileName = \"/home/kovacsendre/Asztal/Practice/starting-project API/src/App.js\";\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    const response = await fetch(\"https://swapi.dev/api/films/\");\n    const data = await response.json();\n    const tranformedMovies = data.results.map(movieData => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.relese_date\n      };\n    });\n    setMovies(tranformedMovies);\n    setIsLoading(false);\n  }\n\n  console.log(movies);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, !!isLoading && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 24\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/kovacsendre/Asztal/Practice/starting-project API/src/App.js"],"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","fetchMoviesHandler","response","fetch","data","json","tranformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","relese_date","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,EAApC;AACA,QAAM,CAACK,SAAD,EAAWC,YAAX,IAA2BN,QAAQ,CAAC,KAAD,CAAzC;;AAKA,iBAAeO,kBAAf,GAAoC;AAClCD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,UAAME,QAAQ,GAAI,MAAMC,KAAK,CAAC,8BAAD,CAA7B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAGK,UAAMC,gBAAgB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;AACvD,aAAO;AACLC,QAAAA,EAAE,EAAED,SAAS,CAACE,UADT;AAELC,QAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,QAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHlB;AAILC,QAAAA,WAAW,EAAEN,SAAS,CAACO;AAJlB,OAAP;AAMD,KAPwB,CAAzB;AAQAlB,IAAAA,SAAS,CAACQ,gBAAD,CAAT;AACAN,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEL;;AACDiB,EAAAA,OAAO,CAACC,GAAR,CAAYrB,MAAZ;AAEA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEI,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,CAAC,CAACF,SAAF,iBAAe,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEF,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADjB,CAJF,CADF;AAUD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState();\n  const [isLoading,setIsLoading] = useState(false);\n\n\n\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n   const response =  await fetch(\"https://swapi.dev/api/films/\");\n   const data = await response.json();\n  \n      \n        const tranformedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.relese_date,\n          };\n        });\n        setMovies(tranformedMovies);\n        setIsLoading(false);\n    \n  }\n  console.log(movies)\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n      { !!isLoading && <MoviesList movies={movies} />}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}